IP = [58, 50, 42, 34, 26, 18, 10, 2,60, 52, 44, 36, 28, 20, 12, 4, 62, 54, 46, 38, 30, 22, 14, 6, 64, 56, 48, 40, 32, 24, 16, 8, 57, 49, 41, 33, 25, 17, 9, 1, 59, 51, 43, 35, 27, 19, 11, 3, 61, 53, 45, 37, 29, 21, 13, 5, 63, 55, 47, 39, 31, 23, 15, 7 ]

IP_1 = [ 
40, 8, 48, 16, 56, 24, 64, 32, 
39, 7, 47, 15, 55, 23, 63, 31, 
38, 6, 46, 14, 54, 22, 62, 30, 
37, 5, 45, 13, 53, 21, 61, 29,
36, 4, 44, 12, 52, 20, 60, 28, 
35, 3, 43, 11, 51, 19, 59, 27, 
34, 2, 42, 10, 50, 18, 58, 26, 
33, 1, 41, 9, 49, 17, 57, 25 ] 


E = [
32, 1, 2, 3, 4, 5,
4, 5, 6, 7, 8, 9,
8, 9, 10, 11, 12, 13,
12, 13, 14, 15, 16, 17,
16, 17, 18, 19, 20, 21,
20, 21, 22, 23, 24, 25,
24, 25, 26, 27, 28, 29,
28, 29, 30, 31, 32, 1 ]
S =[[[ 14, 4, 13, 1, 2, 15, 11, 8, 3, 10, 6, 12, 5, 9, 0, 7 ],
     [ 0, 15, 7, 4, 14, 2, 13, 1, 10, 6, 12, 11, 9, 5, 3, 8 ],
     [ 4, 1, 14, 8, 13, 6, 2, 11, 15, 12, 9, 7, 3, 10, 5, 0 ],
     [ 15, 12, 8, 2, 4, 9, 1, 7, 5, 11, 3, 14, 10, 0, 6, 13 ]],
    [[ 15, 1, 8, 14, 6, 11, 3, 4, 9, 7, 2, 13, 12, 0, 5, 10 ],
     [ 3, 13, 4, 7, 15, 2, 8, 14, 12, 0, 1, 10, 6, 9, 11, 5 ],
     [ 0, 14, 7, 11, 10, 4, 13, 1, 5, 8, 12, 6, 9, 3, 2, 15 ],
     [ 13, 8, 10, 1, 3, 15, 4, 2, 11, 6, 7, 12, 0, 5, 14, 9 ]],
    [[ 10, 0, 9, 14, 6, 3, 15, 5, 1, 13, 12, 7, 11, 4, 2, 8 ],
     [ 13, 7, 0, 9, 3, 4, 6, 10, 2, 8, 5, 14, 12, 11, 15, 1 ],
     [ 13, 6, 4, 9, 8, 15, 3, 0, 11, 1, 2, 12, 5, 10, 14, 7 ],
     [ 1, 10, 13, 0, 6, 9, 8, 7, 4, 15, 14, 3, 11, 5, 2, 12 ]],
    [[ 7, 13, 14, 3, 0, 6, 9, 10, 1, 2, 8, 5, 11, 12, 4, 15 ],
     [ 13, 8, 11, 5, 6, 15, 0, 3, 4, 7, 2, 12, 1, 10, 14, 9 ],
     [ 10, 6, 9, 0, 12, 11, 7, 13, 15, 1, 3, 14, 5, 2, 8, 3 ],
     [ 3, 15, 0, 6, 10, 1, 13, 8, 9, 4, 5, 11, 12, 7, 2, 14 ]],
    [[ 2, 12, 4, 1, 7, 10, 11, 6, 8, 5, 3, 15, 13, 0, 14, 9 ],
     [ 14, 11, 2, 12, 4, 7, 13, 1, 5, 0, 15, 10, 3, 9, 8, 6 ],
     [ 4, 2, 1, 11, 10, 13, 7, 8, 15, 9, 12, 5, 6, 3, 0, 14 ],
     [ 11, 8, 12, 7, 1, 14, 2, 13, 6, 15, 0, 9, 10, 4, 5, 3 ]],
    [[ 12, 1, 10, 15, 9, 2, 6, 8, 0, 13, 3, 4, 14, 7, 5, 11 ],
     [ 10, 15, 4, 2, 7, 12, 9, 5, 6, 1, 13, 14, 0, 11, 3, 8 ],
     [ 9, 14, 15, 5, 2, 8, 12, 3, 7, 0, 4, 10, 1, 13, 11, 6 ],
     [ 4, 3, 2, 12, 9, 5, 15, 10, 11, 14, 1, 7, 6, 0, 8, 13 ]],
    [[ 4, 11, 2, 14, 15, 0, 8, 13, 3, 12, 9, 7, 5, 10, 6, 1 ],
     [ 13, 0, 11, 7, 4, 9, 1, 10, 14, 3, 5, 12, 2, 15, 8, 6 ],
     [ 1, 4, 11, 13, 12, 3, 7, 14, 10, 15, 6, 8, 0, 5, 9, 2 ],
     [ 6, 11, 13, 8, 1, 4, 10, 7, 9, 5, 0, 15, 14, 2, 3, 12 ]],
    [[ 13, 2, 8, 4, 6, 15, 11, 1, 10, 9, 3, 14, 5, 0, 12, 7 ],
     [ 1, 15, 13, 8, 10, 3, 7, 4, 12, 5, 6, 11, 0, 14, 9, 2 ],
     [ 7, 11, 4, 1, 9, 12, 14, 2, 0, 6, 10, 13, 15, 3, 5, 8 ],
     [ 2, 1, 14, 7, 4, 10, 8, 13, 15, 12, 9, 0, 3, 5, 6, 11 ]]]

P = [ 
16, 7, 20, 21, 
29, 12, 28, 17, 
1, 15, 23, 26, 
5, 18, 31, 10, 
2, 8, 24, 14, 
32, 27, 3, 9, 
19, 13, 30, 6, 
22, 11, 4, 25 ];      


PC1 = [
57, 49, 41, 33, 25, 17, 9, 
1, 58, 50, 42, 34, 26, 18, 
10, 2, 59, 51, 43, 35, 27, 
19, 11, 3, 60, 52, 44, 36, 
63, 55, 47, 39, 31, 23, 15, 
7, 62, 54, 46, 38, 30, 22, 
14, 6, 61, 53, 45, 37, 29, 
21, 13, 5, 28, 20, 12, 4 ]   

PC2 = [
14, 17, 11, 24, 1, 5, 
3, 28, 15, 6, 21, 10, 
23, 19, 12, 4, 26, 8, 
16, 7, 27, 20, 13, 2, 
41, 52, 31, 37, 47, 55, 
30, 40, 51, 45, 33, 48, 
44, 49, 39, 56, 34, 53, 
46, 42, 50, 36, 29, 32 ]

def ipchange(plain):#IP置换
    temp=[]
    for i in IP:
        temp.append(plain[i-1])
    return temp
def expand(s):#E扩散
    temp=[]
    for i in E:
        temp.append(s[i-1])
    return temp
def key2(s):
    temp=[]
    for i in PC2:
        temp.append(s[i-1])
    return temp
def key1(mykey):#生成密钥
    temp=[]
    key=[]
    for i in PC1:
        temp.append(mykey[i-1])
    for i in range(16):
        if i==1 or i==0 or i==8 or i==15:
            keyl=temp[1:28]
            keyl.append(temp[0])
            keyr=temp[29:]
            keyr.append(temp[28])
        else:
            keyl=temp[2:28]
            keyl.extend(temp[:2])
            keyr=temp[30:]
            keyr.extend(temp[28:30])
        temp=keyl+keyr
        key.append(key2(temp))
    return key
def f(key,s):
    s=expand(s)
    res=[]  
    for j in range(48):
        s[j]=s[j]^key[j]
    for i in range(8):#进行s盒查找变换
        row=s[6*i]*2+s[6*i+5]
        col=s[6*i+1]*8+s[6*i+2]*4+s[6*i+3]*2+s[6*i+4]
        num=bin(S[i][row][col])
        num=list(num[2:])
        if len(num)!=4:
            for j in range(4-len(num)):
                num.insert(0,'0')
        num=[int(x) for x in num]
        res.extend(num)
    temp=[]
    for i in P:
        temp.append(res[i-1])
    #print(temp)
    return temp
def IP1(s):
    temp=[]
    for i in IP_1:
        temp.append(s[i-1])
    return temp

s=list(bin(int('02468aceeca86420',16)))#02468aceeca86420input("输入明文")
plain=s[2:]
if len(plain)%8!=0:
    for i in range(8-len(plain)%8):#在最前面补齐0
        plain.insert(0,'0')
plain=[int(x) for x in plain]
mykey=list(bin(int('ff14717847d8e859',16)))#ff14717847d8e859input("输入密钥")
mykey=mykey[2:]
if len(mykey)%8!=0:
    for i in range(8-len(mykey)%8):#在最前面补齐0
        mykey.insert(0,'0')
mykey=[int(x) for x in mykey]
key=key1(mykey)
l0=ipchange(plain)[:32]
r0=ipchange(plain)[32:]
for i in range(1):
    l1=r0
    fres=f(key[i],r0)
    r1=[]
    for j in range(32):
        r1.append(fres[j]^l0[j])
    r0=r1
    l0=l1
    print(l0+r0)
res=IP1(r0+l0)
re=""
for i in range(0,64,4):
    re+=hex(res[i]*8+res[i+1]*4+res[i+2]*2+res[i+3])[2:]
print(re)
