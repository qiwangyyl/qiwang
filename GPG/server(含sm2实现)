import socket
import time
import random
import math
import binascii
from hashlib import sha256
from Crypto.Util import number
from gmssl import func
from gmssl.sm4 import CryptSM4, SM4_ENCRYPT, SM4_DECRYPT
MaxBytes=1024*1024
# 有限域的阶
p = 0x8542D69E4C044F18E8B92435BF6FF7DE457283915C45517D722EDB8B08F1DFC3
A = 0x787968B4FA32C3FD2417842E73BBFEFF2F3C848B6831D7E0EC65228B3937E498
B = 0x63E4C6D3B23B0C849CF84241484BFE48F61D59A5B16BA06E6E12D1DA27C5249A
x_G = 0x421DEBD61B62EAB6746434EBC3CC315E32220B3BADD50BDC4C4E6C147FEDD43D
y_G = 0x0680512BCBB42C07D47349D2153B70C4E5D7FDFCBFA36EA1A85841B9E46E09A2
n = 0x8542D69E4C044F18E8B92435BF6FF7DD297720630485628D5AE74EE7C32E79B7
x_B = 0x435B39CCA8F3B508C1488AFC67BE491A0F7BA07E581A0E4849A5CF70628A7E0A
y_B = 0x75DDBA78F15FEECB4C7895E2C1CDF5FE01DEBB2CDBADF45399CCF77BBA076A42
public_key=(x_B,y_B)
private_key = 0x1649AB77A00637BD5E2EFE283FBF353534AA7F7CB89463F208DDBC2920BB0DA0

#随机产生1<=k<=n-1
k = 0x4C62EEFD6ECFC2B95B92FD6C3D9575148AFA17425546D49018E5388D49DD7B4F

def gcd1(a, b): 
    if b == 0:
        return 1,0,a
    else:
        x, y, gcd = gcd1(b, a % b) 
        x, y = y, (x - (a // b) * y) 
        return x,y,gcd
#椭圆曲线上的同一点加法运算（*2运算）
def elliptic_double(x1,y1):
    t1 = (3 * (x1 * x1)%p + A)%p
    t2 = gcd1((2 * y1) % p,p)[0]
    t = (t1 * t2) % p
    x3 = ((t * t) % p - x1 - x1) % p
    y3 = ((t * (x1 - x3)%p) % p - y1) % p
    return x3,y3
#椭圆曲线上的不同点加法运算
def elliptic_add(x1,y1,x_G,y_G):
    t1 = (y_G - y1) % p
    t2 =gcd1((x_G - x1) % p,p)[0]
    t = (t1 * t2) % p
    x3 = ((t * t) % p - x1 - x_G) % p
    y3 = ((t * (x1 - x3)%p) % p - y1) % p
    return x3,y3
#椭圆曲线上的乘法运算
def multiply(x1,y1,k,x_G,y_G):
    if k == 2:
        return elliptic_double(x1,y1)
    if k == 3:
        x1,y1 = elliptic_double(x1,y1)
        return elliptic_add(x1,y1,x_G,y_G)
    if k % 2 == 0:
        x1,y1 = multiply(x1, y1, k // 2,x_G,y_G)
        x1,y1 = elliptic_double(x1,y1)
        return x1,y1
    if k % 2 == 1:
        x1,y1 = multiply(x1, y1, (k - 1) // 2,x_G,y_G)
        x1,y1 = elliptic_double(x1,y1)
        x1,y1 = elliptic_add(x1,y1,x_G,y_G)
        return x1,y1
def Point_bit(x1,y1):
    X1 = bin(x1)[2:].zfill(256)
    Y1 = bin(y1)[2:].zfill(256)
    return '00000100' + X1 + Y1  
def SHA256(str):
    m = sha256()  # 构建sha256对象
    m.update(str.encode(encoding='utf-8'))
    str_sha256 = m.hexdigest()
    # hexdigest()将加密字符串 生成十六进制数据字符串值
    return str, str_sha256
#扩展密钥方案
def KDF(x,klen):
    ct = 1
    res = ""
    for i in range(1,klen // 256): 
        ct =ct+1
        res=res+SHA256(x+bin(ct)[2:].zfill(32))[1]
    if klen % 256 != 0:
        res=res+ SHA256(x+bin(ct)[2:].zfill(32))[1][:(klen-256*int(klen // 256))//4]
    else:
        res=res+SHA256(x+bin(ct)[2:].zfill(32))[1]

    res = bin(int(res, 16))[2:].zfill(klen) #16进制字符串转2 进制
    return res
def xor(bitm,t):
    res = ""
    for i in range(len(bitm)):
        add = int(bitm[i]) + int(t[i])
        if add == 1:
            res = res + "1"
        else:
            res = res + "0"
    return res
def bit_Point(hexC1):
    x = int(hexC1[-128:-64], 16)
    y = int(hexC1[-64:], 16)
    if int(hexC1[:2], 16) == 4:
        return x, y
def Point_C1_in(Point_C1):
    x,y = Point_C1
    temp1 = y * y % p
    temp2 = (x * x * x + A * x + B) % p
    if temp1 == temp2:
        return 1
    return 0

def decrypt(C,private_key):
    clen=len(C)
    hexC1=C[:130]
    hexC2=C[130:clen-64]
    hexC3=C[clen-64:]
    #下面进行解密工作
    Point_C1 =  bit_Point(hexC1) #将C1转化为椭圆曲线上的点
    if(1 - Point_C1_in(Point_C1)): #看点是否在椭圆曲线上
        exit(-1)
    #无穷远点在这里并没有考虑
    x2,y2 = Point_C1
    x2,y2 = multiply(x2,y2,private_key,Point_C1[0],Point_C1[1]) #计算倍点并转化为2进制数比特串
    bit_x2 = bin(x2)[2:].zfill(256)
    bit_y2 = bin(y2)[2:].zfill(256)
    binlen=len(hexC2)*4
    binC2=bin(int(hexC2,16))[2:].zfill(binlen)
    t = KDF(bit_x2 + bit_y2,binlen)
    MM = xor(binC2,t)  #计算M ′ = C2 ⊕ t
    begin = 0
    MM_ming_bin = ''
    for i in  MM:
        if i == '1':
            begin = 1
        if begin == 1:
            MM_ming_bin += i
    MM_ming = bytes.fromhex(hex(int(MM_ming_bin,2))[2:])
    print("解密生成的字符串为： " )
    print(MM_ming.decode())
    #print(hex(int(MM_ming_bin,2))[2:])
    return MM_ming.decode()
 
server = socket.socket(socket.AF_INET,socket.SOCK_STREAM)
server.settimeout(60)
host = '127.0.0.1'
#host = socket.gethostname()
port = 11223
server.bind((host, port))        # 绑定端口
server.listen(1)                     # 监听
try:
    client,addr = server.accept()          # 等待客户端连接
    print(addr," 客户端连接")
    client.send(str(public_key[0]).encode())#向客户端发送公钥
    client.send(str(public_key[1]).encode())#向客户端发送公钥
    while True:
        data = client.recv(MaxBytes)#服务器接受数据
        #C2=client.recv(MaxBytes).decode()
        enc_key = client.recv(MaxBytes).decode()#接受加密的密钥
        if not data:
            print('数据为空，链接中断')
            break
        localTime = time.asctime( time.localtime(time.time()))
        print(localTime,' 接收到数据字节数:',len(data))
        ###数据解密

        dec_key =decrypt(enc_key,private_key)#解出密钥，利用私钥
        print("得到密钥："+dec_key)
        iv = b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        # bytes类型
        crypt_sm4 = CryptSM4()
        crypt_sm4.set_key(dec_key.encode(), SM4_DECRYPT)
        dec_data = crypt_sm4.crypt_ecb(data)  #利用得到的对称密钥，解出数据
        print("解密数据成功")
        print(dec_data.decode())

except BaseException as e:
    print("出现异常：")
    print(repr(e))
finally:
    server.close()                   
    print("关闭链接")
