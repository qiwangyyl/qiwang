from hashlib import sha256
import string
import random
#定义信息中的字符范围:字母、数字、标点
InfoArea=string.digits+string.ascii_letters+string.punctuation
#叶子节点级联前缀0x00
def x00(info):
    return hex(0)+info
#中间节点级联前缀0x01
def x01(info1,info2):
    return hex(1)+info1+info2
#采用sha256进行hash
def HASH(info):
    return sha256(info.encode('utf-8')).hexdigest()
#建立一个类以建立默克树
class MerkleTree:
    def __init__(self,info):
        self.l=info#所有叶子
        self.root,self.lr=self.merkle()
        
    def merkle(self):
        llist=[]
        lr=dict()#字典标记左右
        depth=0#计数
        if len(self.l)==0:
            llist=sha256().hexdigest()
            print("depth为0")
            return llist,{}#仅有根节点,hash空消息
        elif len(self.l)==1:
            llist.append(HASH(x00(self.l[0])))
            print('depth为1')
            return llist,{}#仅有一个叶子节点
        else:#大于等于2个叶子节点
            for i in self.l:
                #print(i)
                llist.append(HASH(i))#存储所有节点的hash值
            while len(llist)>1:#逐层迭代进行计算
                depth+=1
                temp=[]
                while len(llist)>1:
                    x=llist.pop(0)
                    y=llist.pop(0)
                    lr[x]=0
                    lr[y]=1
                    temp.append(HASH(x01(x,y)))
                    #llist=temp
                if len(llist)%2==1:#节点个数为单数，则将最后一个节点放在最右面
                    last=llist.pop(-1)
                    temp.append(last)
                    lr[last]=1
                llist=temp
            depth+=1
            print('depth为',depth)
            #print(lr)
            return llist[0],lr

        
    def hashnode(self,llist):#返回根节点
        if len(llist)==1:
            return llist[0]
        elif len(llist)==2:
            return HASH(x01(llist[0],llist[1]))
        else:
            for i in range(len(llist)):
                if pow(2,i)>=len(llist):
                    k=pow(2,i-1)
                    break
            return HASH(x01(self.hashnode(llist[0:k]),self.hashnode(llist[k:len(llist)])))
               
    def path(self,m,llist):#计算出从m到根节点需要的hash值，以便进行存在性证明
        k=0 
        p=[]
        if len(llist)==2:
            p.append(llist[(m+1)%2])
        elif len(llist)>2:
            for i in range(1,len(llist)):
                if pow(2,i)>=len(llist):
                    k=pow(2,i-1)
                    break
            if m<k:
                p.extend(self.path(m,llist[0:k]))
                p.append(self.hashnode(llist[k:len(llist)]))
            else:
                p.extend(self.path(m-k,llist[k:len(llist)]))
                p.append(self.hashnode(llist[0:k]))
        return p
        
    def paths(self,m):#第m位置的路径
        llist=[]
        if len(self.l)>1:
            for i in range(0,len(self.l)):
                llist.append(HASH(self.l[i]))
            return self.path(m,llist)
        elif len(self.l)==1:
            return{}
        else:
            return 0
        
    def proof(self,m,leaf):
        PATH=self.paths(m)
        #print(self.paths(m))
        hashleaf=HASH(leaf)
        for i in PATH:
            if self.lr[i]==0:#节点位置在左
                hashleaf=HASH(x01(i,hashleaf))
            else:
                hashleaf=HASH(x01(hashleaf,i))
        print(hashleaf)
        print(self.root)
        if hashleaf==self.root:
            return True
        else:
            return False

#建立具有指定个数的叶子节点的默克树
def build(m):
    leaflist=['1','2']
    lrandom=''
    for i in  range(m-2):
        lrandom+=random.choice(InfoArea)
    leaflist+=[lrandom[i:i+2]for i in range(0,len(lrandom))]#生成不同的叶子节点，避免重复
    return leaflist
ll=build(100000)#十万个叶子节点
#存在性证明
ex=MerkleTree(ll)
print(ex.proof(0,'1'))

