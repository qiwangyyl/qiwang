#include<iostream>
#include<thread>
#include<ratio>
#include<chrono>
#include <stdlib.h>
#include<intrin.h>
#include"sm4.h"
using namespace std;
using namespace std::chrono;
//四字节数组转换成unsigned long

unsigned char* Data_plain2= (unsigned char*)malloc(320000);
unsigned char* encrypt2 = (unsigned char*)malloc(320000);
unsigned char* decrypt2 = (unsigned char*)malloc(320000);
void tolong(unsigned char* in, unsigned long* out)//循环展开
{
	*out = 0;
	*out = ((unsigned long)in[0] << (24)) ^ *out;
	*out = ((unsigned long)in[1] << (16)) ^ *out;
	*out = ((unsigned long)in[2] << (8)) ^ *out;
	*out = ((unsigned long)in[3]) ^ *out;
}
//unsigned long转换成四字节数组
void longto(unsigned long in, unsigned char* out)//循环展开
{
	*(out) = (unsigned long)(in >> (24 ));
	*(out + 1) = (unsigned long)(in >> (16));
	*(out + 2) = (unsigned long)(in >> (8));
	*(out + 3) = (unsigned long)(in);
}
//左移，保留丢弃位
unsigned long leftmove(unsigned long data, int length)
{
	unsigned long result = 0;
	result = (data << length) ^ (data >> (32 - length));
	return result;
}
unsigned long lunkey(unsigned long input)                 //先使用Sbox进行非线性变化，再异或
{
	unsigned long temp = 0;
	unsigned char inbox[4] = { 0 };
	unsigned char outbox[4] = { 0 };
	longto(input, inbox);
	outbox[0] = TBL_SBOX[inbox[0]];//循环展开
	outbox[1] = TBL_SBOX[inbox[1]];
	outbox[2] = TBL_SBOX[inbox[2]];
	outbox[3] = TBL_SBOX[inbox[3]];
	tolong(outbox, &temp);
	temp = temp ^ leftmove(temp, 13) ^ leftmove(temp, 23);
	return temp;
}
//先使用Sbox进行非线性变化，再进行异或
unsigned long lundata(unsigned long input)
{
	unsigned long temp = 0;
	unsigned char inbox[4] = { 0 };
	unsigned char outbox[4] = { 0 };
	longto(input, inbox);
	outbox[0] = TBL_SBOX[inbox[0]];//循环展开
	outbox[1] = TBL_SBOX[inbox[1]];
	outbox[2] = TBL_SBOX[inbox[2]];
	outbox[3] = TBL_SBOX[inbox[3]];
	tolong(outbox, &temp);
	temp = temp ^ leftmove(temp, 2) ^ leftmove(temp, 10) ^ leftmove(temp, 18) ^ leftmove(temp, 24);
	return temp;
}

void encode(int len, unsigned char* key, unsigned char* input, unsigned char* output)   //加密函数
{
	int i = 0;
	int j = 0;
	unsigned long keyarr[4] = { 0 };//存储密钥的数组
	unsigned long keylist[36] = { 0 };//密钥扩展运算的结果
	unsigned long datalist[36] = { 0 };//加密数据
	tolong(key, &(keyarr[0]));
	tolong(key + 4, &(keyarr[1]));
	tolong(key + 8, &(keyarr[2]));
	tolong(key + 12, &(keyarr[3]));
	//第一步：密钥与系统参数的异或
	__m128i tm1 = _mm_loadu_epi32(&keyarr[0]);
	__m128i tm2 = _mm_loadu_epi32(&TBL_SYS_PARAMS[0]);
	_mm_storeu_epi32(&keylist, _mm_xor_si128(tm1, tm2));
	//第二步：获取子密钥
	/*unsigned long keylist1 = 0;
	unsigned long keylist2 = 0;*/
	for (i = 0; i < 32; i++)
	{
		/*keylist1 = keylist[i + 1] ^ keylist[i + 2];
		keylist2=keylist[i + 3] ^ TBL_FIX_PARAMS[i];
		keylist[i + 4] = keylist[i] ^ lunkey(keylist1 ^ keylist2);*/
		keylist[i + 4] = keylist[i] ^ lunkey(keylist[i + 1] ^ keylist[i + 2] ^ keylist[i + 3] ^ TBL_FIX_PARAMS[i]);
	}
	/*unsigned long datalist1 = 0;
	unsigned long datalist2 = 0;*/
	for (j = 0; j < len / 16; j++)
	{
		tolong(input + 16 * j, &datalist[0]);
		tolong(input + 16 * j + 4, &datalist[1]);
		tolong(input + 16 * j + 8, &datalist[2]);
		tolong(input + 16 * j + 12, &datalist[3]);
		//加密
		for (i = 0; i < 32; i++)
		{
			/*datalist1 = datalist[i + 1] ^ datalist[i + 2];
			datalist2 = datalist[i + 3] ^ keylist[4 + i];
			datalist[i + 4] = datalist[i] ^lundata(datalist1 ^ datalist2);*/
			datalist[i + 4] = datalist[i] ^ lundata(datalist[i + 1] ^ datalist[i + 2] ^ datalist[i + 3] ^ keylist[i+4]);
		}
			
		//
		longto(datalist[35], output + 16 * j);
		longto(datalist[34], output + 16 * j + 4);
		longto(datalist[33], output + 16 * j + 8);
		longto(datalist[32], output + 16 * j + 12);
	}/*
	free(input16);*/
}
void decode(int len, unsigned char* key, unsigned char* input, unsigned char* output)   //解密函数
{
	int i = 0;
	int j = 0;
	unsigned long keyarr[4] = { 0 };//存储密钥的数组
	unsigned long keylist[36] = { 0 };//密钥扩展运算的结果
	unsigned long datalist[36] = { 0 };//解密数据
	tolong(key, &(keyarr[0]));
	tolong(key + 4, &(keyarr[1]));
	tolong(key + 8, &(keyarr[2]));
	tolong(key + 12, &(keyarr[3]));
	//第一步：密钥与系统参数的异或
	__m128i tm1 = _mm_loadu_epi32(&keyarr[0]);
	__m128i tm2 = _mm_loadu_epi32(&TBL_SYS_PARAMS[0]);
	_mm_storeu_epi32(&keylist, _mm_xor_si128(tm1, tm2));
	//第二步：获取子密钥
	/*unsigned long keylist1 = 0;
	unsigned long keylist2 = 0;*/
	for (i = 0; i < 32; i++)
	{
		/*keylist1 = keylist[i + 1] ^ keylist[i + 2];
		keylist2 = keylist[i + 3] ^ TBL_FIX_PARAMS[i];
		keylist[i + 4] = keylist[i] ^ lunkey(keylist1 ^ keylist2);*/
		keylist[i + 4] = keylist[i] ^ lunkey(keylist[i + 1] ^ keylist[i + 2] ^ keylist[i + 3] ^ TBL_FIX_PARAMS[i]);
	}
	/*unsigned long datalist1 = 0;
	unsigned long datalist2 = 0;*/
	for (j = 0; j < len / 16; j++)
	{
		tolong(input + 16 * j, &datalist[0]);
		tolong(input + 16 * j + 4, &datalist[1]);
		tolong(input + 16 * j + 8, &datalist[2]);
		tolong(input + 16 * j + 12, &datalist[3]);
		//解密
		for (i = 0; i < 32; i++)
		{
			/*datalist1 = datalist[i + 1] ^ datalist[i + 2];
			datalist2 = datalist[i + 3] ^ keylist[35-i];
			datalist[i + 4] = datalist[i] ^ lundata(datalist1 ^ datalist2);*/
			datalist[i + 4] = datalist[i] ^ lundata(datalist[i + 1] ^ datalist[i + 2] ^ datalist[i + 3] ^ keylist[35 - i]);
		}

		//
		longto(datalist[35], output + 16 * j);
		longto(datalist[34], output + 16 * j + 4);
		longto(datalist[33], output + 16 * j + 8);
		longto(datalist[32], output + 16 * j + 12);
	}
}
int main()
{
	cout << "优化后：" << endl;
	unsigned char encrypt[50] = { 0 };    //定义加密输出缓存区
	unsigned char decrypt[50] = { 0 };    //定义解密输出缓存区
	unsigned char key[16] = { 0x01,0x23,0x45,0x67,0x89,0xab,0xcd,0xef,0xfe,0xdc,0xba,0x98,0x76,0x54,0x32,0x10 };
	//定义16字节的密钥
	//定义16字节的原始输入数据
	unsigned char Data_plain[16] = { 0x01,0x23,0x45,0x67,0x89,0xab,0xcd,0xef,0xfe,0xdc,0xba,0x98,0x76,0x54,0x32,0x10 };
	int len = 16 * (sizeof(Data_plain) / 16) + 16 * ((sizeof(Data_plain) % 16) ? 1 : 0);//得到扩充后的字节数
	high_resolution_clock::time_point start1 = high_resolution_clock::now();
	encode(sizeof(Data_plain), key, Data_plain, encrypt);
	high_resolution_clock::time_point end1 = high_resolution_clock::now();//数据加密
	duration<double, milli>time1 = end1 - start1;
	printf("加密后数据是：\n");
	for (int i = 0; i < len; i++)
		printf("%x ", *(encrypt + i));
	printf("\n");
	high_resolution_clock::time_point start0 = high_resolution_clock::now();
	decode(sizeof(encrypt), key, encrypt, decrypt);
	high_resolution_clock::time_point end0 = high_resolution_clock::now();
	duration<double, milli>time0 = end0 - start0;
	printf("解密后数据是：\n");
	for (int i = 0; i < len; i++)
		printf("%x ", *(decrypt + i));
	printf("\n");
	high_resolution_clock::time_point start2 = high_resolution_clock::now();
	thread* t = new thread[8];//多线程
	int s = sizeof(Data_plain2);
	t[0]= thread(encode, s/4, key, Data_plain2, encrypt2);
	t[1] = thread(encode, s / 8, key, Data_plain2+ s / 8, encrypt2+s/ 8);
	t[2] = thread(encode, s / 8, key, Data_plain2+ 2*s / 8, encrypt2 + 2 * s/ 8);
	t[3] = thread(encode, s / 8, key, Data_plain2 + 3 * s / 8, encrypt2 + 3 * s / 8);
	t[4] = thread(encode, s / 8, key, Data_plain2 + 4 * s / 8, encrypt2 + 4 * s / 8);
	t[5] = thread(encode, s / 8, key, Data_plain2 + 5 * s / 8, encrypt2 + 5 * s / 8);
	t[6] = thread(encode, s / 8, key, Data_plain2 + 6 * s / 8, encrypt2 + 6 * s / 8);
	t[7] = thread(encode, s / 8, key, Data_plain2 + 7 * s / 8, encrypt2 + 7 * s / 8);
	t[0].join();
	t[1].join();
	t[2].join();
	t[3].join();
	t[4].join();
	t[5].join();
	t[6].join();
	t[7].join();
	high_resolution_clock::time_point end2 = high_resolution_clock::now();//数据加密
	duration<double, milli>time2 = end2 - start2;
	high_resolution_clock::time_point start00 = high_resolution_clock::now();
	thread*t1 = new thread[8];//多线程
	s = sizeof(encrypt2);
	t1[0] = thread(decode, s / 8, key, encrypt2, decrypt2);
	t1[1] = thread(decode, s / 8, key, encrypt2 + s / 8, decrypt2 + s / 8);
	t1[2] = thread(decode, s / 8, key, encrypt2 + 2 * s / 8, decrypt2 + 2 * s / 8);
	t1[3] = thread(decode, s / 8, key, encrypt2 + 3 * s / 8, decrypt2 + 3 * s / 8);
	t1[4] = thread(decode, s / 8, key, encrypt2 + 4 * s / 8, decrypt2 + 4 * s / 8);
	t1[5] = thread(decode, s / 8, key, encrypt2 + 5 * s / 8, decrypt2 + 5 * s / 8);
	t1[6] = thread(decode, s / 8, key, encrypt2 + 6 * s / 8, decrypt2 + 6 * s / 8);
	t1[7] = thread(decode, s / 8, key, encrypt2 + 7 * s / 8, decrypt2 + 7 * s / 8);
	t1[0].join();
	t1[1].join();
	t1[2].join();
	t1[3].join();
	t1[4].join();
	t1[5].join();
	t1[6].join();
	t1[7].join();
	high_resolution_clock::time_point end00 = high_resolution_clock::now();//数据加密
	duration<double, milli>time00 = end00 - start00;
	cout << "加密延迟为：" << time1.count() << "ms" << endl;
	cout << "解密延迟为：" << time0.count() << "ms" << endl;
	cout << "加密吞吐量为：" << 320000 / (time2.count()) << endl;
	cout << "解密吞吐量为：" << 320000 / (time00.count()) << endl;

	return 0;
}
